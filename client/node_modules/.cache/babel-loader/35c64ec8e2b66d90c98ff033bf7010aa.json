{"ast":null,"code":"var _jsxFileName = \"/Users/scott/Desktop/io.blueninja.volet_admin/client/src/screens/Login/Login/index.js\";\nimport React, { Component } from \"react\";\nimport { loginNow, getToken } from \"../../../actions/actions\";\nimport { connect } from \"react-redux\";\nimport { url } from \"../../../config\";\nimport { NavLink } from \"react-router-dom\";\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onActionValidateEmail = () => {};\n\n    this._storeData = async receivedToken => {\n      this.setState({\n        token: receivedToken\n      });\n\n      try {\n        await localStorage.setItem(\"user_token\", receivedToken);\n\n        if (receivedToken !== null) {\n          fetch(\"\".concat(url, \"/api/admin/me\"), {\n            method: \"GET\",\n            headers: {\n              \"Content-Type\": \"application/json\",\n              \"x-access-token\": \"\".concat(receivedToken),\n              Authorization: \"Bearer \".concat(receivedToken)\n            }\n          }).then(res => res.json()).then(data => {\n            if (data.success === true) {\n              alert(data.message);\n              this.props.loginNow();\n            }\n          }).catch(err => console.log(err));\n        }\n      } catch (error) {\n        console.log(error, \"this is an error\");\n      }\n    };\n\n    this.login = async () => {\n      let email = this.state.email;\n\n      if (email.includes(\"@\")) {\n        if (this.state.token !== null) {\n          this._storeData(this.state.token);\n        }\n\n        fetch(\"\".concat(url, \"/api/admin/login\"), {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\",\n            Accept: \"application/json\"\n          },\n          body: JSON.stringify({\n            email: this.state.email,\n            password: this.state.password\n          })\n        }).then(res => res.json()).then(data => {\n          if (data.success === true) {\n            alert(data.message);\n            console.log(\"Login Data: \", data.user);\n            let token = data.token;\n            let email = data.user.email;\n            let id = data.user._id;\n            console.log(\"token\", token);\n            localStorage.setItem(\"user_token\", token);\n            localStorage.setItem(\"user_email\", email);\n            localStorage.setItem(\"user_id\", id); // localStorage.setItem(\"user_id\", id);\n\n            if (token !== null) {\n              this.props.loginNow();\n            }\n          }\n        }).catch(err => console.log(err));\n      } else {\n        alert(\"Please enter a valid email\");\n      }\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      token: \"\"\n    };\n  }\n\n  inputEmail(e) {\n    this.setState({\n      email: e.target.value\n    });\n  }\n\n  inputPassword(e) {\n    this.setState({\n      password: e.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"login-form-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      className: \"login-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"input\", {\n      value: this.state.email,\n      onChange: this.inputEmail.bind(this),\n      type: \"email\",\n      className: \"form-control login-input\",\n      placeholder: \"Enter email\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      value: this.state.password,\n      onChange: this.inputPassword.bind(this),\n      type: \"password\",\n      className: \"form-control login-input\",\n      placeholder: \"Enter password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }), React.createElement(NavLink, {\n      to: \"/forgotpassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"small\", {\n      id: \"emailHelp\",\n      className: \"form-text forgot-password-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Forgot Password?\")), React.createElement(\"button\", {\n      className: \"login-btn\",\n      onClick: () => this.login(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Login\"), React.createElement(\"small\", {\n      id: \"emailHelp\",\n      className: \"form-text forgot-password-text go-register-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Don't have an account? \", React.createElement(NavLink, {\n      to: \"/register\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Sign up\")));\n  }\n\n}\n/**\n|--------------------------------------------------\n| connects dispatcher to the page\n|--------------------------------------------------\n*/\n\n\nexport default connect(null, {\n  loginNow,\n  getToken\n})(index);","map":{"version":3,"sources":["/Users/scott/Desktop/io.blueninja.volet_admin/client/src/screens/Login/Login/index.js"],"names":["React","Component","loginNow","getToken","connect","url","NavLink","index","constructor","props","onActionValidateEmail","_storeData","receivedToken","setState","token","localStorage","setItem","fetch","method","headers","Authorization","then","res","json","data","success","alert","message","catch","err","console","log","error","login","email","state","includes","Accept","body","JSON","stringify","password","user","id","_id","inputEmail","e","target","value","inputPassword","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { loginNow, getToken } from \"../../../actions/actions\";\nimport { connect } from \"react-redux\";\nimport { url } from \"../../../config\";\n\nimport { NavLink } from \"react-router-dom\";\n\nclass index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      token: \"\"\n    };\n  }\n\n  onActionValidateEmail = () => {};\n\n  inputEmail(e) {\n    this.setState({ email: e.target.value });\n  }\n\n  inputPassword(e) {\n    this.setState({ password: e.target.value });\n  }\n\n  _storeData = async receivedToken => {\n    this.setState({ token: receivedToken });\n    try {\n      await localStorage.setItem(\"user_token\", receivedToken);\n\n      if (receivedToken !== null) {\n        fetch(`${url}/api/admin/me`, {\n          method: \"GET\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n            \"x-access-token\": `${receivedToken}`,\n            Authorization: `Bearer ${receivedToken}`\n          }\n        })\n          .then(res => res.json())\n\n          .then(data => {\n            if (data.success === true) {\n              alert(data.message);\n              this.props.loginNow();\n            }\n          })\n\n          .catch(err => console.log(err));\n      }\n    } catch (error) {\n      console.log(error, \"this is an error\");\n    }\n  };\n\n  /**\n    |--------------------------------------------------\n    | calls login dispatcher \n    |--------------------------------------------------\n    */\n  login = async () => {\n    let email = this.state.email;\n\n    if (email.includes(\"@\")) {\n      if (this.state.token !== null) {\n        this._storeData(this.state.token);\n      }\n\n      fetch(`${url}/api/admin/login`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          Accept: \"application/json\"\n        },\n        body: JSON.stringify({\n          email: this.state.email,\n          password: this.state.password\n        })\n      })\n        .then(res => res.json())\n\n        .then(data => {\n          if (data.success === true) {\n            alert(data.message);\n            console.log(\"Login Data: \", data.user);\n            let token = data.token;\n            let email = data.user.email;\n            let id = data.user._id;\n            console.log(\"token\", token);\n            localStorage.setItem(\"user_token\", token);\n            localStorage.setItem(\"user_email\", email);\n            localStorage.setItem(\"user_id\", id);\n            // localStorage.setItem(\"user_id\", id);\n            if (token !== null) {\n              this.props.loginNow();\n            }\n          }\n        })\n\n        .catch(err => console.log(err));\n    } else {\n      alert(\"Please enter a valid email\");\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"login-form-container\">\n        <h2 className=\"login-title\">Login</h2>\n\n        <input\n          value={this.state.email}\n          onChange={this.inputEmail.bind(this)}\n          type=\"email\"\n          className=\"form-control login-input\"\n          placeholder=\"Enter email\"\n        />\n        <input\n          value={this.state.password}\n          onChange={this.inputPassword.bind(this)}\n          type=\"password\"\n          className=\"form-control login-input\"\n          placeholder=\"Enter password\"\n        />\n\n        <NavLink to=\"/forgotpassword\">\n          <small id=\"emailHelp\" className=\"form-text forgot-password-text\">\n            Forgot Password?\n          </small>\n        </NavLink>\n        <button className=\"login-btn\" onClick={() => this.login()}>\n          Login\n        </button>\n\n        <small\n          id=\"emailHelp\"\n          className=\"form-text forgot-password-text go-register-text\"\n        >\n          Don't have an account? <NavLink to=\"/register\">Sign up</NavLink>\n        </small>\n      </div>\n    );\n  }\n}\n\n/**\n|--------------------------------------------------\n| connects dispatcher to the page\n|--------------------------------------------------\n*/\nexport default connect(\n  null,\n  { loginNow, getToken }\n)(index);\n"]},"metadata":{},"sourceType":"module"}