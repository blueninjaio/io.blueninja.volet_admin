{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Delaunator = factory();\n})(this, function () {\n  'use strict';\n\n  var EPSILON = Math.pow(2, -52);\n\n  var Delaunator = function Delaunator(coords) {\n    var this$1 = this;\n    var minX = Infinity;\n    var minY = Infinity;\n    var maxX = -Infinity;\n    var maxY = -Infinity;\n    var n = coords.length >> 1;\n    var ids = this.ids = new Uint32Array(n);\n\n    if (n > 0 && typeof coords[0] !== 'number') {\n      throw new Error('Expected coords to contain numbers.');\n    }\n\n    this.coords = coords;\n\n    for (var i = 0; i < n; i++) {\n      var x = coords[2 * i];\n      var y = coords[2 * i + 1];\n\n      if (x < minX) {\n        minX = x;\n      }\n\n      if (y < minY) {\n        minY = y;\n      }\n\n      if (x > maxX) {\n        maxX = x;\n      }\n\n      if (y > maxY) {\n        maxY = y;\n      }\n\n      ids[i] = i;\n    }\n\n    var cx = (minX + maxX) / 2;\n    var cy = (minY + maxY) / 2;\n    var minDist = Infinity;\n    var i0, i1, i2; // pick a seed point close to the centroid\n\n    for (var i$1 = 0; i$1 < n; i$1++) {\n      var d = dist(cx, cy, coords[2 * i$1], coords[2 * i$1 + 1]);\n\n      if (d < minDist) {\n        i0 = i$1;\n        minDist = d;\n      }\n    }\n\n    var i0x = coords[2 * i0];\n    var i0y = coords[2 * i0 + 1];\n    minDist = Infinity; // find the point closest to the seed\n\n    for (var i$2 = 0; i$2 < n; i$2++) {\n      if (i$2 === i0) {\n        continue;\n      }\n\n      var d$1 = dist(i0x, i0y, coords[2 * i$2], coords[2 * i$2 + 1]);\n\n      if (d$1 < minDist && d$1 > 0) {\n        i1 = i$2;\n        minDist = d$1;\n      }\n    }\n\n    var i1x = coords[2 * i1];\n    var i1y = coords[2 * i1 + 1];\n    var minRadius = Infinity; // find the third point which forms the smallest circumcircle with the first two\n\n    for (var i$3 = 0; i$3 < n; i$3++) {\n      if (i$3 === i0 || i$3 === i1) {\n        continue;\n      }\n\n      var r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i$3], coords[2 * i$3 + 1]);\n\n      if (r < minRadius) {\n        i2 = i$3;\n        minRadius = r;\n      }\n    }\n\n    var i2x = coords[2 * i2];\n    var i2y = coords[2 * i2 + 1];\n\n    if (minRadius === Infinity) {\n      throw new Error('No Delaunay triangulation exists for this input.');\n    } // swap the order of the seed points for counter-clockwise orientation\n\n\n    if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n      var i$4 = i1;\n      var x$1 = i1x;\n      var y$1 = i1y;\n      i1 = i2;\n      i1x = i2x;\n      i1y = i2y;\n      i2 = i$4;\n      i2x = x$1;\n      i2y = y$1;\n    }\n\n    var center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n    this._cx = center.x;\n    this._cy = center.y; // sort the points by distance from the seed triangle circumcenter\n\n    quicksort(ids, coords, 0, ids.length - 1, center.x, center.y); // initialize a hash table for storing edges of the advancing convex hull\n\n    this._hashSize = Math.ceil(Math.sqrt(n));\n    this._hash = new Array(this._hashSize); // initialize a circular doubly-linked list that will hold an advancing convex hull\n\n    var e = this.hull = insertNode(coords, i0);\n\n    this._hashEdge(e);\n\n    e.t = 0;\n    e = insertNode(coords, i1, e);\n\n    this._hashEdge(e);\n\n    e.t = 1;\n    e = insertNode(coords, i2, e);\n\n    this._hashEdge(e);\n\n    e.t = 2;\n    var maxTriangles = 2 * n - 5;\n    var triangles = this.triangles = new Uint32Array(maxTriangles * 3);\n    var halfedges = this.halfedges = new Int32Array(maxTriangles * 3);\n    this.trianglesLen = 0;\n\n    this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n    for (var k = 0, xp = void 0, yp = void 0; k < ids.length; k++) {\n      var i$5 = ids[k];\n      var x$2 = coords[2 * i$5];\n      var y$2 = coords[2 * i$5 + 1]; // skip near-duplicate points\n\n      if (k > 0 && Math.abs(x$2 - xp) <= EPSILON && Math.abs(y$2 - yp) <= EPSILON) {\n        continue;\n      }\n\n      xp = x$2;\n      yp = y$2; // skip seed triangle points\n\n      if (i$5 === i0 || i$5 === i1 || i$5 === i2) {\n        continue;\n      } // find a visible edge on the convex hull using edge hash\n\n\n      var startKey = this$1._hashKey(x$2, y$2);\n\n      var key = startKey;\n      var start = void 0;\n\n      do {\n        start = this$1._hash[key];\n        key = (key + 1) % this$1._hashSize;\n      } while ((!start || start.removed) && key !== startKey);\n\n      start = start.prev;\n      e = start;\n\n      while (!orient(x$2, y$2, e.x, e.y, e.next.x, e.next.y)) {\n        e = e.next;\n\n        if (e === start) {\n          e = null;\n          break;\n        }\n      } // likely a near-duplicate point; skip it\n\n\n      if (!e) {\n        continue;\n      }\n\n      var walkBack = e === start; // add the first triangle from the point\n\n      var t = this$1._addTriangle(e.i, i$5, e.next.i, -1, -1, e.t);\n\n      e.t = t; // keep track of boundary triangles on the hull\n\n      e = insertNode(coords, i$5, e); // recursively flip triangles from the point until they satisfy the Delaunay condition\n\n      e.t = this$1._legalize(t + 2); // walk forward through the hull, adding more triangles and flipping recursively\n\n      var q = e.next;\n\n      while (orient(x$2, y$2, q.x, q.y, q.next.x, q.next.y)) {\n        t = this$1._addTriangle(q.i, i$5, q.next.i, q.prev.t, -1, q.t);\n        q.prev.t = this$1._legalize(t + 2);\n        this$1.hull = removeNode(q);\n        q = q.next;\n      }\n\n      if (walkBack) {\n        // walk backward from the other side, adding more triangles and flipping\n        q = e.prev;\n\n        while (orient(x$2, y$2, q.prev.x, q.prev.y, q.x, q.y)) {\n          t = this$1._addTriangle(q.prev.i, i$5, q.i, -1, q.t, q.prev.t);\n\n          this$1._legalize(t + 2);\n\n          q.prev.t = t;\n          this$1.hull = removeNode(q);\n          q = q.prev;\n        }\n      } // save the two new edges in the hash table\n\n\n      this$1._hashEdge(e);\n\n      this$1._hashEdge(e.prev);\n    } // trim typed triangle mesh arrays\n\n\n    this.triangles = triangles.subarray(0, this.trianglesLen);\n    this.halfedges = halfedges.subarray(0, this.trianglesLen);\n  };\n\n  Delaunator.from = function from(points, getX, getY) {\n    if (!getX) {\n      getX = defaultGetX;\n    }\n\n    if (!getY) {\n      getY = defaultGetY;\n    }\n\n    var n = points.length;\n    var coords = new Float64Array(n * 2);\n\n    for (var i = 0; i < n; i++) {\n      var p = points[i];\n      coords[2 * i] = getX(p);\n      coords[2 * i + 1] = getY(p);\n    }\n\n    return new Delaunator(coords);\n  };\n\n  Delaunator.prototype._hashEdge = function _hashEdge(e) {\n    this._hash[this._hashKey(e.x, e.y)] = e;\n  };\n\n  Delaunator.prototype._hashKey = function _hashKey(x, y) {\n    return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n  };\n\n  Delaunator.prototype._legalize = function _legalize(a) {\n    var ref = this;\n    var triangles = ref.triangles;\n    var coords = ref.coords;\n    var halfedges = ref.halfedges;\n    var b = halfedges[a];\n    /* if the pair of triangles doesn't satisfy the Delaunay condition\n     * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n     * then do the same check/flip recursively for the new pair of triangles\n     *\n     *       pl                pl\n     *      /||\\              /  \\\n     *   al/ || \\bl        al/\\a\n     *    /  ||  \\          /  \\\n     *   /  a||b  \\flip/___ar___\\\n     * p0\\   ||   /p1   =>   p0\\---bl---/p1\n     *    \\  ||  /          \\  /\n     *   ar\\ || /br         b\\/br\n     *      \\||/              \\  /\n     *       pr                pr\n     */\n\n    var a0 = a - a % 3;\n    var b0 = b - b % 3;\n    var al = a0 + (a + 1) % 3;\n    var ar = a0 + (a + 2) % 3;\n    var bl = b0 + (b + 2) % 3;\n\n    if (b === -1) {\n      return ar;\n    }\n\n    var p0 = triangles[ar];\n    var pr = triangles[a];\n    var pl = triangles[al];\n    var p1 = triangles[bl];\n    var illegal = inCircle(coords[2 * p0], coords[2 * p0 + 1], coords[2 * pr], coords[2 * pr + 1], coords[2 * pl], coords[2 * pl + 1], coords[2 * p1], coords[2 * p1 + 1]);\n\n    if (illegal) {\n      triangles[a] = p1;\n      triangles[b] = p0;\n      var hbl = halfedges[bl]; // edge swapped on the other side of the hull (rare); fix the halfedge reference\n\n      if (hbl === -1) {\n        var e = this.hull;\n\n        do {\n          if (e.t === bl) {\n            e.t = a;\n            break;\n          }\n\n          e = e.next;\n        } while (e !== this.hull);\n      }\n\n      this._link(a, hbl);\n\n      this._link(b, halfedges[ar]);\n\n      this._link(ar, bl);\n\n      var br = b0 + (b + 1) % 3;\n\n      this._legalize(a);\n\n      return this._legalize(br);\n    }\n\n    return ar;\n  };\n\n  Delaunator.prototype._link = function _link(a, b) {\n    this.halfedges[a] = b;\n\n    if (b !== -1) {\n      this.halfedges[b] = a;\n    }\n  }; // add a new triangle given vertex indices and adjacent half-edge ids\n\n\n  Delaunator.prototype._addTriangle = function _addTriangle(i0, i1, i2, a, b, c) {\n    var t = this.trianglesLen;\n    this.triangles[t] = i0;\n    this.triangles[t + 1] = i1;\n    this.triangles[t + 2] = i2;\n\n    this._link(t, a);\n\n    this._link(t + 1, b);\n\n    this._link(t + 2, c);\n\n    this.trianglesLen += 3;\n    return t;\n  }; // monotonically increases with real angle, but doesn't need expensive trigonometry\n\n\n  function pseudoAngle(dx, dy) {\n    var p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n  }\n\n  function dist(ax, ay, bx, by) {\n    var dx = ax - bx;\n    var dy = ay - by;\n    return dx * dx + dy * dy;\n  }\n\n  function orient(px, py, qx, qy, rx, ry) {\n    return (qy - py) * (rx - qx) - (qx - px) * (ry - qy) < 0;\n  }\n\n  function inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    var dx = ax - px;\n    var dy = ay - py;\n    var ex = bx - px;\n    var ey = by - py;\n    var fx = cx - px;\n    var fy = cy - py;\n    var ap = dx * dx + dy * dy;\n    var bp = ex * ex + ey * ey;\n    var cp = fx * fx + fy * fy;\n    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;\n  }\n\n  function circumradius(ax, ay, bx, by, cx, cy) {\n    var dx = bx - ax;\n    var dy = by - ay;\n    var ex = cx - ax;\n    var ey = cy - ay;\n    var bl = dx * dx + dy * dy;\n    var cl = ex * ex + ey * ey;\n    var d = dx * ey - dy * ex;\n    var x = (ey * bl - dy * cl) * 0.5 / d;\n    var y = (dx * cl - ex * bl) * 0.5 / d;\n    return bl && cl && d && x * x + y * y || Infinity;\n  }\n\n  function circumcenter(ax, ay, bx, by, cx, cy) {\n    var dx = bx - ax;\n    var dy = by - ay;\n    var ex = cx - ax;\n    var ey = cy - ay;\n    var bl = dx * dx + dy * dy;\n    var cl = ex * ex + ey * ey;\n    var d = dx * ey - dy * ex;\n    var x = ax + (ey * bl - dy * cl) * 0.5 / d;\n    var y = ay + (dx * cl - ex * bl) * 0.5 / d;\n    return {\n      x: x,\n      y: y\n    };\n  } // create a new node in a doubly linked list\n\n\n  function insertNode(coords, i, prev) {\n    var node = {\n      i: i,\n      x: coords[2 * i],\n      y: coords[2 * i + 1],\n      t: 0,\n      prev: null,\n      next: null,\n      removed: false\n    };\n\n    if (!prev) {\n      node.prev = node;\n      node.next = node;\n    } else {\n      node.next = prev.next;\n      node.prev = prev;\n      prev.next.prev = node;\n      prev.next = node;\n    }\n\n    return node;\n  }\n\n  function removeNode(node) {\n    node.prev.next = node.next;\n    node.next.prev = node.prev;\n    node.removed = true;\n    return node.prev;\n  }\n\n  function quicksort(ids, coords, left, right, cx, cy) {\n    var i, j, temp;\n\n    if (right - left <= 20) {\n      for (i = left + 1; i <= right; i++) {\n        temp = ids[i];\n        j = i - 1;\n\n        while (j >= left && compare(coords, ids[j], temp, cx, cy) > 0) {\n          ids[j + 1] = ids[j--];\n        }\n\n        ids[j + 1] = temp;\n      }\n    } else {\n      var median = left + right >> 1;\n      i = left + 1;\n      j = right;\n      swap(ids, median, i);\n\n      if (compare(coords, ids[left], ids[right], cx, cy) > 0) {\n        swap(ids, left, right);\n      }\n\n      if (compare(coords, ids[i], ids[right], cx, cy) > 0) {\n        swap(ids, i, right);\n      }\n\n      if (compare(coords, ids[left], ids[i], cx, cy) > 0) {\n        swap(ids, left, i);\n      }\n\n      temp = ids[i];\n\n      while (true) {\n        do {\n          i++;\n        } while (compare(coords, ids[i], temp, cx, cy) < 0);\n\n        do {\n          j--;\n        } while (compare(coords, ids[j], temp, cx, cy) > 0);\n\n        if (j < i) {\n          break;\n        }\n\n        swap(ids, i, j);\n      }\n\n      ids[left + 1] = ids[j];\n      ids[j] = temp;\n\n      if (right - i + 1 >= j - left) {\n        quicksort(ids, coords, i, right, cx, cy);\n        quicksort(ids, coords, left, j - 1, cx, cy);\n      } else {\n        quicksort(ids, coords, left, j - 1, cx, cy);\n        quicksort(ids, coords, i, right, cx, cy);\n      }\n    }\n  }\n\n  function compare(coords, i, j, cx, cy) {\n    var d1 = dist(coords[2 * i], coords[2 * i + 1], cx, cy);\n    var d2 = dist(coords[2 * j], coords[2 * j + 1], cx, cy);\n    return d1 - d2 || coords[2 * i] - coords[2 * j] || coords[2 * i + 1] - coords[2 * j + 1];\n  }\n\n  function swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n  }\n\n  function defaultGetX(p) {\n    return p[0];\n  }\n\n  function defaultGetY(p) {\n    return p[1];\n  }\n\n  return Delaunator;\n});","map":null,"metadata":{},"sourceType":"script"}