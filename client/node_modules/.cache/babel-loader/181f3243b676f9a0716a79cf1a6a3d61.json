{"ast":null,"code":"var _jsxFileName = \"/Users/scott/Desktop/io.blueninja.volet_admin/client/src/screens/App/Dashboard/index.js\";\nimport React, { Component } from \"react\";\nimport { VictoryPie, VictoryChart, VictoryLine, VictoryTheme, VictoryBar } from \"victory\";\nimport Table from \"../../../components/Table\";\nimport data from \"../../../data/data.json\";\nimport { url } from \"../../../config\";\n/**\n|--------------------------------------------------\n| renders the Dashboard page\n|--------------------------------------------------\n*/\n\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.fetchAllFeedback = () => {\n      fetch(\"\".concat(url, \"/api/feedbacks\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          let feedback = [];\n          data.feedbacks.map(x => {\n            let user = {\n              _id: x._id,\n              rating: x.rating,\n              description: x.description,\n              dateCreated: x.dateCreated\n            };\n            feedback.push(user);\n          });\n          this.setState({\n            feedback\n          });\n        }\n      }).catch(err => {\n        console.log(\"Error for users page\", err);\n        alert(\"Error connecting to server\", [{\n          text: \"OK\",\n          onClick: () => null\n        }], {\n          cancelable: false\n        });\n      });\n    };\n\n    this.fetchAllBusiness = () => {\n      fetch(\"\".concat(url, \"/api/business\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          let business = [];\n          let stats = [];\n          data.businesses.map(x => {\n            let statistics = {\n              x: x.type_of_business,\n              y: x.company_name\n            };\n            stats.push(statistics);\n            this.setState({\n              stats\n            });\n          });\n          this.setState({\n            business,\n            businessData: data.businesses\n          }); // console.log(this.state.business);\n        }\n      }).catch(err => {\n        console.log(\"Error for business page\", err);\n        alert(\"Error connecting to server\", [{\n          text: \"OK\",\n          onClick: () => null\n        }], {\n          cancelable: false\n        });\n      });\n    };\n\n    this.fetchAllUsers = () => {\n      fetch(\"\".concat(url, \"/api/users\"), {\n        method: \"GET\",\n        mode: \"cors\",\n        headers: {\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n          Accept: \"application/json\"\n        }\n      }).then(res => res.json()).then(data => {\n        if (data.success) {\n          let users = [];\n          data.users.map(x => {\n            let user = {\n              x: x.user_type,\n              y: data.users.length\n            };\n            users.push(user);\n          });\n          this.setState({\n            users\n          });\n        }\n      }).catch(err => {\n        console.log(\"Error for users page\", err);\n        alert(\"Error connecting to server\", [{\n          text: \"OK\",\n          onClick: () => null\n        }], {\n          cancelable: false\n        });\n      });\n    };\n\n    this.state = {\n      business: [],\n      businesData: [],\n      stats: [],\n      users: [],\n      feedback: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAllBusiness();\n    this.fetchAllUsers();\n    this.fetchAllFeedback();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main-dashboard-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"h3\", {\n      className: \"page-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Dashboard\"), React.createElement(\"div\", {\n      className: \"container-fluid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"graph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"graph-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"Business Types\"), React.createElement(VictoryChart, {\n      theme: VictoryTheme.material,\n      width: 700,\n      height: 300,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, React.createElement(VictoryBar, {\n      horizontal: true,\n      cornerRadius: 10,\n      data: this.state.stats,\n      style: {\n        label: {\n          fontSize: 16\n        },\n        data: {\n          fill: ({\n            y\n          }) => y > 18 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n        }\n      },\n      animate: {\n        duration: 2000,\n        onLoad: {\n          duration: 2000\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"graph-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"User Vs User Agents\"), React.createElement(VictoryPie, {\n      innerRadius: 200,\n      width: 1000,\n      data: this.state.users,\n      style: {\n        data: {\n          fill: ({\n            y\n          }) => y > 3 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n        }\n      },\n      animate: {\n        duration: 2000,\n        onLoad: {\n          duration: 2000\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }))), React.createElement(\"div\", {\n      className: \"graph\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"graph-container-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"Most Recent Feedback \"), React.createElement(\"table\", {\n      class: \"table table-bordered table-striped\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, React.createElement(\"thead\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"Name\"), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276\n      },\n      __self: this\n    }, \"Rating\"), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"th\", {\n      scope: \"col\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, \"Date\"))), React.createElement(\"tbody\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, this.state.feedback.map((x, i) => React.createElement(\"tr\", {\n      key: i,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    }, x._id), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, x.rating), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }, x.description), React.createElement(\"td\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, x.dateCreated)))))), React.createElement(\"div\", {\n      className: \"graph-container-2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294\n      },\n      __self: this\n    }, \"Pending Agent Request\")))));\n  }\n\n}","map":{"version":3,"sources":["/Users/scott/Desktop/io.blueninja.volet_admin/client/src/screens/App/Dashboard/index.js"],"names":["React","Component","VictoryPie","VictoryChart","VictoryLine","VictoryTheme","VictoryBar","Table","data","url","index","constructor","props","fetchAllFeedback","fetch","method","mode","headers","Accept","then","res","json","success","feedback","feedbacks","map","x","user","_id","rating","description","dateCreated","push","setState","catch","err","console","log","alert","text","onClick","cancelable","fetchAllBusiness","business","stats","businesses","statistics","type_of_business","y","company_name","businessData","fetchAllUsers","users","user_type","length","state","businesData","componentDidMount","render","material","label","fontSize","fill","duration","onLoad","i"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  VictoryPie,\n  VictoryChart,\n  VictoryLine,\n  VictoryTheme,\n  VictoryBar\n} from \"victory\";\n\nimport Table from \"../../../components/Table\";\nimport data from \"../../../data/data.json\";\nimport { url } from \"../../../config\";\n\n/**\n|--------------------------------------------------\n| renders the Dashboard page\n|--------------------------------------------------\n*/\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      business: [],\n      businesData: [],\n      stats: [],\n      users: [],\n      feedback: []\n    };\n  }\n\n  componentDidMount() {\n    this.fetchAllBusiness();\n    this.fetchAllUsers();\n    this.fetchAllFeedback();\n  }\n\n  fetchAllFeedback = () => {\n    fetch(`${url}/api/feedbacks`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        Accept: \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          let feedback = [];\n          data.feedbacks.map(x => {\n            let user = {\n              _id: x._id,\n              rating: x.rating,\n              description: x.description,\n              dateCreated: x.dateCreated\n            };\n            feedback.push(user);\n          });\n\n          this.setState({ feedback });\n        }\n      })\n      .catch(err => {\n        console.log(\"Error for users page\", err);\n\n        alert(\n          \"Error connecting to server\",\n\n          [{ text: \"OK\", onClick: () => null }],\n          { cancelable: false }\n        );\n      });\n  };\n\n  fetchAllBusiness = () => {\n    fetch(`${url}/api/business`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        Accept: \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          let business = [];\n          let stats = [];\n\n          data.businesses.map(x => {\n            let statistics = {\n              x: x.type_of_business,\n              y: x.company_name\n            };\n            stats.push(statistics);\n            this.setState({ stats });\n          });\n\n          this.setState({ business, businessData: data.businesses });\n          // console.log(this.state.business);\n        }\n      })\n      .catch(err => {\n        console.log(\"Error for business page\", err);\n\n        alert(\n          \"Error connecting to server\",\n\n          [{ text: \"OK\", onClick: () => null }],\n          { cancelable: false }\n        );\n      });\n  };\n\n  fetchAllUsers = () => {\n    fetch(`${url}/api/users`, {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\",\n        \"Content-Type\": \"application/json; charset=utf-8\",\n        Accept: \"application/json\"\n      }\n    })\n      .then(res => res.json())\n      .then(data => {\n        if (data.success) {\n          let users = [];\n          data.users.map(x => {\n            let user = {\n              x: x.user_type,\n              y: data.users.length\n            };\n            users.push(user);\n          });\n\n          this.setState({ users });\n        }\n      })\n      .catch(err => {\n        console.log(\"Error for users page\", err);\n\n        alert(\n          \"Error connecting to server\",\n\n          [{ text: \"OK\", onClick: () => null }],\n          { cancelable: false }\n        );\n      });\n  };\n\n  render() {\n    return (\n      <div className=\"main-dashboard-container\">\n        <h3 className=\"page-title\">Dashboard</h3>\n        <div className=\"container-fluid\">\n          <div className=\"graph\">\n            <div className=\"graph-container\">\n              <p>Business Types</p>\n              <VictoryChart\n                theme={VictoryTheme.material}\n                width={700}\n                height={300}\n              >\n                <VictoryBar\n                  horizontal\n                  cornerRadius={10}\n                  data={this.state.stats}\n                  style={{\n                    label: {\n                      fontSize: 16\n                    },\n                    data: {\n                      fill: ({ y }) =>\n                        y > 18 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n                    }\n                  }}\n                  animate={{\n                    duration: 2000,\n                    onLoad: { duration: 2000 }\n                  }}\n                />\n              </VictoryChart>\n            </div>\n            <div className=\"graph-container\">\n              <p>User Vs User Agents</p>\n              {/* <VictoryChart\n                theme={VictoryTheme.material}\n                width={700}\n                height={300}\n              >\n                <VictoryBar\n                  cornerRadius={10}\n                  data={this.state.users}\n                  style={{\n                    label: {\n                      fontSize: 16\n                    },\n                    data: {\n                      fill: ({ y }) =>\n                        y > 18 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n                    }\n                  }}\n                  animate={{\n                    duration: 2000,\n                    onLoad: { duration: 2000 }\n                  }}\n                />\n              </VictoryChart> */}\n              <VictoryPie\n                innerRadius={200}\n                width={1000}\n                data={this.state.users}\n                style={{\n                  data: {\n                    fill: ({ y }) =>\n                      y > 3 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n                  }\n                }}\n                animate={{\n                  duration: 2000,\n                  onLoad: { duration: 2000 }\n                }}\n              />\n            </div>\n            {/* <div className=\"graph-container\">\n              <p>Graph</p>\n              <VictoryChart theme={VictoryTheme.material}>\n                <VictoryLine\n                  style={{\n                    data: { stroke: \"rgb(12,96,250)\" },\n                    parent: { border: \"1px solid #ccc\" }\n                  }}\n                  data={[\n                    { x: 1, y: 2 },\n                    { x: 2, y: 3 },\n                    { x: 3, y: 5 },\n                    { x: 4, y: 4 },\n                    { x: 5, y: 7 }\n                  ]}\n                  animate={{\n                    duration: 2000,\n                    onLoad: { duration: 2000 }\n                  }}\n                />\n              </VictoryChart>\n            </div> */}\n            {/* <div className=\"graph-container\">\n              <p>Graph</p>\n              <VictoryPie\n                innerRadius={200}\n                data={[{ x: 11, y: 35 }, { x: 11, y: 40 }]}\n                style={{\n                  data: {\n                    fill: ({ y }) =>\n                      y > 39 ? \"rgb(95,153,252)\" : \"rgb(12,96,250)\"\n                  }\n                }}\n                animate={{\n                  duration: 2000,\n                  onLoad: { duration: 2000 }\n                }}\n              />\n            </div> */}\n          </div>\n          <div className=\"graph\">\n            <div className=\"graph-container-2\">\n              <p>Most Recent Feedback </p>\n              <table class=\"table table-bordered table-striped\">\n                <thead>\n                  <tr>\n                    <th scope=\"col\">Name</th>\n                    <th scope=\"col\">Rating</th>\n                    <th scope=\"col\">Description</th>\n                    <th scope=\"col\">Date</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {this.state.feedback.map((x, i) => (\n                    <tr key={i}>\n                      <td>{x._id}</td>\n                      <td>{x.rating}</td>\n                      <td>{x.description}</td>\n                      <td>{x.dateCreated}</td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n            <div className=\"graph-container-2\">\n              <p>Pending Agent Request</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}